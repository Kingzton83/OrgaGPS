services:
  backend:
    container_name: backend
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./:/backend
    env_file:
      - .env
    ports:
      - "8000:8000"
    environment:
      DJANGO_SETTINGS_MODULE: orgagps.settings
      DB_NAME: orgagpsdatabase
      DB_USER: admin
      DB_PASSWORD:
      DB_HOST: db
      DB_PORT: 5432
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672/
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    command: >
      sh -c "
      until nc -z db 5432; do
        echo 'Waiting for the database to be ready...';
        sleep 3;
      done;
      ./start.sh"
    networks:
      - dev-network

  frontend:
    container_name: frontend
    build:
      context: ../frontend
      dockerfile: Dockerfile
    volumes:
      - ../frontend:/frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_ROOT: http://localhost:8000
    networks:
      - dev-network

  db:
    image: postgres:16
    container_name: db
    environment:
      POSTGRES_DB: orgagpsdatabase
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: 
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d orgagpsdatabase -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  celery:
    container_name: celery
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./:/backend
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    command: celery -A orgagps worker --loglevel=info
    networks:
      - dev-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - dev-network

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "15672:15672"  # Web management interface
      - "5672:5672"    # AMQP protocol port
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dev-network

networks:
  dev-network:
    driver: bridge

volumes:
  postgres_data:
